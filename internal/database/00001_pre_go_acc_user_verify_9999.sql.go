// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00001_pre_go_acc_user_verify_9999.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getInfoOtp = `-- name: GetInfoOtp :one
SELECT verify_id, verify_otp, verify_key, verify_key_hash, verify_type, is_verified, is_deleted, verify_created_at, verify_updated_at
FROM pre_go_acc_user_verify_9999
WHERE verify_key_hash = $1
`

func (q *Queries) GetInfoOtp(ctx context.Context, verifyKeyHash string) (PreGoAccUserVerify9999, error) {
	row := q.db.QueryRow(ctx, getInfoOtp, verifyKeyHash)
	var i PreGoAccUserVerify9999
	err := row.Scan(
		&i.VerifyID,
		&i.VerifyOtp,
		&i.VerifyKey,
		&i.VerifyKeyHash,
		&i.VerifyType,
		&i.IsVerified,
		&i.IsDeleted,
		&i.VerifyCreatedAt,
		&i.VerifyUpdatedAt,
	)
	return i, err
}

const getValidOtp = `-- name: GetValidOtp :one
SELECT verify_otp, verify_key_hash, verify_key, verify_id 
FROM pre_go_acc_user_verify_9999
WHERE verify_key_hash = $1 AND is_verified = 0
`

type GetValidOtpRow struct {
	VerifyOtp     string
	VerifyKeyHash string
	VerifyKey     string
	VerifyID      int32
}

func (q *Queries) GetValidOtp(ctx context.Context, verifyKeyHash string) (GetValidOtpRow, error) {
	row := q.db.QueryRow(ctx, getValidOtp, verifyKeyHash)
	var i GetValidOtpRow
	err := row.Scan(
		&i.VerifyOtp,
		&i.VerifyKeyHash,
		&i.VerifyKey,
		&i.VerifyID,
	)
	return i, err
}

const insertOtpVerify = `-- name: InsertOtpVerify :one
INSERT INTO pre_go_acc_user_verify_9999 (
  verify_otp, 
  verify_key, 
  verify_key_hash, 
  verify_type,
  is_verified,
  is_deleted,
  verify_created_at,
  verify_updated_at
) VALUES (
  $1, $2, $3, $4, 0, 0, NOW(), NOW()
)
RETURNING verify_id
`

type InsertOtpVerifyParams struct {
	VerifyOtp     string
	VerifyKey     string
	VerifyKeyHash string
	VerifyType    pgtype.Int4
}

func (q *Queries) InsertOtpVerify(ctx context.Context, arg InsertOtpVerifyParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertOtpVerify,
		arg.VerifyOtp,
		arg.VerifyKey,
		arg.VerifyKeyHash,
		arg.VerifyType,
	)
	var verify_id int32
	err := row.Scan(&verify_id)
	return verify_id, err
}

const updateUserValificationStatus = `-- name: UpdateUserValificationStatus :exec
UPDATE pre_go_acc_user_verify_9999
  set is_verified = 1,
  verify_updated_at = now()
WHERE verify_key_hash = $1
`

// update lai
func (q *Queries) UpdateUserValificationStatus(ctx context.Context, verifyKeyHash string) error {
	_, err := q.db.Exec(ctx, updateUserValificationStatus, verifyKeyHash)
	return err
}
