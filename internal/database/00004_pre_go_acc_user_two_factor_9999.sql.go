// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00004_pre_go_acc_user_two_factor_9999.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOrUpdateEmail = `-- name: AddOrUpdateEmail :exec
INSERT INTO pre_go_acc_user_two_factor_9999 (
    user_id,
    two_factor_email,
    two_factor_is_active
) VALUES (
    $1, $2, TRUE
) ON CONFLICT (user_id) DO UPDATE SET
    two_factor_email = EXCLUDED.two_factor_email,
    two_factor_updated_at = NOW()
`

type AddOrUpdateEmailParams struct {
	UserID         int32
	TwoFactorEmail pgtype.Text
}

// AddOrUpdateEmail
func (q *Queries) AddOrUpdateEmail(ctx context.Context, arg AddOrUpdateEmailParams) error {
	_, err := q.db.Exec(ctx, addOrUpdateEmail, arg.UserID, arg.TwoFactorEmail)
	return err
}

const addOrUpdatePhoneNumber = `-- name: AddOrUpdatePhoneNumber :exec
INSERT INTO pre_go_acc_user_two_factor_9999 (
    user_id,
    two_factor_phone,
    two_factor_is_active
) VALUES (
    $1, $2, TRUE
) ON CONFLICT (user_id) DO UPDATE SET
    two_factor_phone = EXCLUDED.two_factor_phone,
    two_factor_updated_at = NOW()
`

type AddOrUpdatePhoneNumberParams struct {
	UserID         int32
	TwoFactorPhone pgtype.Text
}

// AddOrUpdatePhoneNumber
func (q *Queries) AddOrUpdatePhoneNumber(ctx context.Context, arg AddOrUpdatePhoneNumberParams) error {
	_, err := q.db.Exec(ctx, addOrUpdatePhoneNumber, arg.UserID, arg.TwoFactorPhone)
	return err
}

const countActiveTwoFactorMethods = `-- name: CountActiveTwoFactorMethods :one
SELECT COUNT(*)
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = $1 AND two_factor_is_active = TRUE
`

// CountActiveTwoFactorMethods
func (q *Queries) CountActiveTwoFactorMethods(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countActiveTwoFactorMethods, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const disableTwoFactor = `-- name: DisableTwoFactor :exec
UPDATE pre_go_acc_user_two_factor_9999
  SET two_factor_is_active = FALSE,
  two_factor_updated_at = NOW()
WHERE user_id = $1 AND two_factor_auth_type = $2
`

type DisableTwoFactorParams struct {
	UserID            int32
	TwoFactorAuthType TwoFactorAuthTypeEnum
}

// DisableTwoFactor
func (q *Queries) DisableTwoFactor(ctx context.Context, arg DisableTwoFactorParams) error {
	_, err := q.db.Exec(ctx, disableTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const enableTwoFactorTypeEmail = `-- name: EnableTwoFactorTypeEmail :exec

INSERT INTO pre_go_acc_user_two_factor_9999 (
    user_id,
    two_factor_auth_type,
    two_factor_auth_secret,
    two_factor_email,
    two_factor_is_active, 
    two_factor_created_at, 
    two_factor_updated_at
) VALUES (
    $1, $2, 'OTP', $3, FALSE, NOW(), NOW()
)
RETURNING two_factor_id, user_id, two_factor_auth_type, two_factor_auth_secret, two_factor_phone, two_factor_email, two_factor_is_active, two_factor_created_at, two_factor_updated_at
`

type EnableTwoFactorTypeEmailParams struct {
	UserID            int32
	TwoFactorAuthType TwoFactorAuthTypeEnum
	TwoFactorEmail    pgtype.Text
}

// file: pre_go_acc_user_two_factor_9999.sql
// EnableTwoFactor
func (q *Queries) EnableTwoFactorTypeEmail(ctx context.Context, arg EnableTwoFactorTypeEmailParams) error {
	_, err := q.db.Exec(ctx, enableTwoFactorTypeEmail, arg.UserID, arg.TwoFactorAuthType, arg.TwoFactorEmail)
	return err
}

const getTwoFactorMethodByID = `-- name: GetTwoFactorMethodByID :one
SELECT two_factor_id, user_id, two_factor_auth_type, two_factor_auth_secret, two_factor_phone, two_factor_email, two_factor_is_active, two_factor_created_at, two_factor_updated_at
FROM pre_go_acc_user_two_factor_9999
WHERE two_factor_id = $1
`

// GetTwoFactorMethodByID
func (q *Queries) GetTwoFactorMethodByID(ctx context.Context, twoFactorID int32) (PreGoAccUserTwoFactor9999, error) {
	row := q.db.QueryRow(ctx, getTwoFactorMethodByID, twoFactorID)
	var i PreGoAccUserTwoFactor9999
	err := row.Scan(
		&i.TwoFactorID,
		&i.UserID,
		&i.TwoFactorAuthType,
		&i.TwoFactorAuthSecret,
		&i.TwoFactorPhone,
		&i.TwoFactorEmail,
		&i.TwoFactorIsActive,
		&i.TwoFactorCreatedAt,
		&i.TwoFactorUpdatedAt,
	)
	return i, err
}

const getTwoFactorMethodByIDandType = `-- name: GetTwoFactorMethodByIDandType :one
SELECT two_factor_id, user_id, two_factor_auth_type, two_factor_auth_secret, two_factor_phone, two_factor_email, two_factor_is_active, two_factor_created_at, two_factor_updated_at
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = $1 AND two_factor_auth_type = $2
`

type GetTwoFactorMethodByIDandTypeParams struct {
	UserID            int32
	TwoFactorAuthType TwoFactorAuthTypeEnum
}

// GetTwoFactorMethodByIDandType
func (q *Queries) GetTwoFactorMethodByIDandType(ctx context.Context, arg GetTwoFactorMethodByIDandTypeParams) (PreGoAccUserTwoFactor9999, error) {
	row := q.db.QueryRow(ctx, getTwoFactorMethodByIDandType, arg.UserID, arg.TwoFactorAuthType)
	var i PreGoAccUserTwoFactor9999
	err := row.Scan(
		&i.TwoFactorID,
		&i.UserID,
		&i.TwoFactorAuthType,
		&i.TwoFactorAuthSecret,
		&i.TwoFactorPhone,
		&i.TwoFactorEmail,
		&i.TwoFactorIsActive,
		&i.TwoFactorCreatedAt,
		&i.TwoFactorUpdatedAt,
	)
	return i, err
}

const getTwoFactorStatus = `-- name: GetTwoFactorStatus :one
SELECT two_factor_is_active
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = $1 AND two_factor_auth_type = $2
`

type GetTwoFactorStatusParams struct {
	UserID            int32
	TwoFactorAuthType TwoFactorAuthTypeEnum
}

// GetTwoFactorStatus
func (q *Queries) GetTwoFactorStatus(ctx context.Context, arg GetTwoFactorStatusParams) (bool, error) {
	row := q.db.QueryRow(ctx, getTwoFactorStatus, arg.UserID, arg.TwoFactorAuthType)
	var two_factor_is_active bool
	err := row.Scan(&two_factor_is_active)
	return two_factor_is_active, err
}

const getUserTwoFactorMethods = `-- name: GetUserTwoFactorMethods :many
SELECT two_factor_id, user_id, two_factor_auth_type, two_factor_auth_secret, two_factor_phone, two_factor_email, two_factor_is_active, two_factor_created_at, two_factor_updated_at
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = $1
`

// GetUserTwoFactorMethods
func (q *Queries) GetUserTwoFactorMethods(ctx context.Context, userID int32) ([]PreGoAccUserTwoFactor9999, error) {
	rows, err := q.db.Query(ctx, getUserTwoFactorMethods, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoAccUserTwoFactor9999
	for rows.Next() {
		var i PreGoAccUserTwoFactor9999
		if err := rows.Scan(
			&i.TwoFactorID,
			&i.UserID,
			&i.TwoFactorAuthType,
			&i.TwoFactorAuthSecret,
			&i.TwoFactorPhone,
			&i.TwoFactorEmail,
			&i.TwoFactorIsActive,
			&i.TwoFactorCreatedAt,
			&i.TwoFactorUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isTwoFactorEnabled = `-- name: IsTwoFactorEnabled :one
SELECT COUNT(*)
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = $1 AND two_factor_is_active = TRUE
`

// IsTwoFactorEnabled
func (q *Queries) IsTwoFactorEnabled(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, isTwoFactorEnabled, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const reactivateTwoFactor = `-- name: ReactivateTwoFactor :exec
UPDATE pre_go_acc_user_two_factor_9999
  SET two_factor_is_active = TRUE,
  two_factor_updated_at = NOW()
WHERE user_id = $1 AND two_factor_auth_type = $2
`

type ReactivateTwoFactorParams struct {
	UserID            int32
	TwoFactorAuthType TwoFactorAuthTypeEnum
}

// ReactivateTwoFactor
func (q *Queries) ReactivateTwoFactor(ctx context.Context, arg ReactivateTwoFactorParams) error {
	_, err := q.db.Exec(ctx, reactivateTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const removeTwoFactor = `-- name: RemoveTwoFactor :exec
DELETE FROM pre_go_acc_user_two_factor_9999
WHERE user_id = $1 AND two_factor_auth_type = $2
`

type RemoveTwoFactorParams struct {
	UserID            int32
	TwoFactorAuthType TwoFactorAuthTypeEnum
}

// RemoveTwoFactor
func (q *Queries) RemoveTwoFactor(ctx context.Context, arg RemoveTwoFactorParams) error {
	_, err := q.db.Exec(ctx, removeTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const updateTwoFactorStatusVerification = `-- name: UpdateTwoFactorStatusVerification :exec
UPDATE pre_go_acc_user_two_factor_9999
  SET two_factor_is_active = TRUE,
  two_factor_updated_at = NOW()
WHERE user_id = $1 AND two_factor_auth_type = $2 AND two_factor_is_active = FALSE
`

type UpdateTwoFactorStatusVerificationParams struct {
	UserID            int32
	TwoFactorAuthType TwoFactorAuthTypeEnum
}

// UpdateTwoFactorStatusVerification
func (q *Queries) UpdateTwoFactorStatusVerification(ctx context.Context, arg UpdateTwoFactorStatusVerificationParams) error {
	_, err := q.db.Exec(ctx, updateTwoFactorStatusVerification, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const verifyTwoFactor = `-- name: VerifyTwoFactor :one
SELECT COUNT(*)
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = $1 AND two_factor_auth_type = $2 AND two_factor_is_active = TRUE
`

type VerifyTwoFactorParams struct {
	UserID            int32
	TwoFactorAuthType TwoFactorAuthTypeEnum
}

// VerifyTwoFactor
func (q *Queries) VerifyTwoFactor(ctx context.Context, arg VerifyTwoFactorParams) (int64, error) {
	row := q.db.QueryRow(ctx, verifyTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	var count int64
	err := row.Scan(&count)
	return count, err
}
