// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00002_pre_go_menu_function.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addNewMenuFunction = `-- name: AddNewMenuFunction :one
INSERT INTO pre_go_menu_function (
    id, name, description, url, active, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, NOW(), NOW()
)
RETURNING id, name, description, url, active, created_at, updated_at
`

type AddNewMenuFunctionParams struct {
	ID          string
	Name        string
	Description pgtype.Text
	Url         pgtype.Text
	Active      pgtype.Bool
}

// AddNewMenuFunction
func (q *Queries) AddNewMenuFunction(ctx context.Context, arg AddNewMenuFunctionParams) (PreGoMenuFunction, error) {
	row := q.db.QueryRow(ctx, addNewMenuFunction,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Url,
		arg.Active,
	)
	var i PreGoMenuFunction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const editMenuFunction = `-- name: EditMenuFunction :one
UPDATE pre_go_menu_function
SET name = $2, description = $3, url = $4, active = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, url, active, created_at, updated_at
`

type EditMenuFunctionParams struct {
	ID          string
	Name        string
	Description pgtype.Text
	Url         pgtype.Text
	Active      pgtype.Bool
}

// EditMenuFunction
func (q *Queries) EditMenuFunction(ctx context.Context, arg EditMenuFunctionParams) (PreGoMenuFunction, error) {
	row := q.db.QueryRow(ctx, editMenuFunction,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Url,
		arg.Active,
	)
	var i PreGoMenuFunction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllMenuFunctionActive = `-- name: GetAllMenuFunctionActive :many
SELECT id, name, description, url, active, created_at, updated_at FROM pre_go_menu_function WHERE active = TRUE
`

// GetAllMenuFunctionActive
func (q *Queries) GetAllMenuFunctionActive(ctx context.Context) ([]PreGoMenuFunction, error) {
	rows, err := q.db.Query(ctx, getAllMenuFunctionActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoMenuFunction
	for rows.Next() {
		var i PreGoMenuFunction
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMenuFunctions = `-- name: GetAllMenuFunctions :many
SELECT id, name, description, url, active, created_at, updated_at FROM pre_go_menu_function ORDER BY created_at DESC
`

// GetAllMenuFunctions
func (q *Queries) GetAllMenuFunctions(ctx context.Context) ([]PreGoMenuFunction, error) {
	rows, err := q.db.Query(ctx, getAllMenuFunctions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoMenuFunction
	for rows.Next() {
		var i PreGoMenuFunction
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuFunctionById = `-- name: GetMenuFunctionById :one
SELECT id, name, description, url, active, created_at, updated_at FROM pre_go_menu_function WHERE id = $1
`

// GetMenuFunctionById
func (q *Queries) GetMenuFunctionById(ctx context.Context, id string) (PreGoMenuFunction, error) {
	row := q.db.QueryRow(ctx, getMenuFunctionById, id)
	var i PreGoMenuFunction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMenuFunctionByName = `-- name: GetMenuFunctionByName :one
SELECT id, name, description, url, active, created_at, updated_at FROM pre_go_menu_function WHERE name = $1
`

// GetMenuFunctionByName
func (q *Queries) GetMenuFunctionByName(ctx context.Context, name string) (PreGoMenuFunction, error) {
	row := q.db.QueryRow(ctx, getMenuFunctionByName, name)
	var i PreGoMenuFunction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeMenuFunction = `-- name: RemoveMenuFunction :one
DELETE FROM pre_go_menu_function WHERE id = $1
RETURNING id, name, description, url, active, created_at, updated_at
`

// RemoveMenuFunction
func (q *Queries) RemoveMenuFunction(ctx context.Context, id string) (PreGoMenuFunction, error) {
	row := q.db.QueryRow(ctx, removeMenuFunction, id)
	var i PreGoMenuFunction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
