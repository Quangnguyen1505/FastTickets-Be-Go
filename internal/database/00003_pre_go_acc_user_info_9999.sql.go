// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00003_pre_go_acc_user_info_9999.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUserHaveUserId = `-- name: AddUserHaveUserId :one
INSERT INTO pre_go_acc_user_info_9999 (
    user_id, user_account, user_nickname, user_avatar, user_state, user_mobile,
    user_gender, user_birthday, user_email, user_is_authentication
) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING user_id
`

type AddUserHaveUserIdParams struct {
	UserID               int64
	UserAccount          string
	UserNickname         pgtype.Text
	UserAvatar           pgtype.Text
	UserState            int16
	UserMobile           pgtype.Text
	UserGender           pgtype.Int2
	UserBirthday         pgtype.Date
	UserEmail            pgtype.Text
	UserIsAuthentication int16
}

func (q *Queries) AddUserHaveUserId(ctx context.Context, arg AddUserHaveUserIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, addUserHaveUserId,
		arg.UserID,
		arg.UserAccount,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserState,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserIsAuthentication,
	)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const editUserByUserId = `-- name: EditUserByUserId :execresult
UPDATE pre_go_acc_user_info_9999
SET user_nickname = $1, user_avatar = $2, user_mobile = $3,
    user_gender = $4, user_birthday = $5, user_email = $6, updated_at = NOW()
WHERE user_id = $7 AND user_is_authentication = 1
`

type EditUserByUserIdParams struct {
	UserNickname pgtype.Text
	UserAvatar   pgtype.Text
	UserMobile   pgtype.Text
	UserGender   pgtype.Int2
	UserBirthday pgtype.Date
	UserEmail    pgtype.Text
	UserID       int64
}

func (q *Queries) EditUserByUserId(ctx context.Context, arg EditUserByUserIdParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, editUserByUserId,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserID,
	)
}

const getUser = `-- name: GetUser :one
SELECT 
    user_id,
    user_account,
    user_nickname, 
    user_avatar, 
    user_state, 
    user_mobile, 
    user_gender, 
    user_birthday, 
    user_email, 
    user_is_authentication,
    created_at,
    updated_at
FROM pre_go_acc_user_info_9999
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (PreGoAccUserInfo9999, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i PreGoAccUserInfo9999
	err := row.Scan(
		&i.UserID,
		&i.UserAccount,
		&i.UserNickname,
		&i.UserAvatar,
		&i.UserState,
		&i.UserMobile,
		&i.UserGender,
		&i.UserBirthday,
		&i.UserEmail,
		&i.UserIsAuthentication,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT 
    user_id,
    user_account,
    user_nickname, 
    user_avatar, 
    user_state, 
    user_mobile, 
    user_gender, 
    user_birthday, 
    user_email, 
    user_is_authentication,
    created_at,
    updated_at
FROM pre_go_acc_user_info_9999
WHERE user_id = ANY($1::bigint[])
`

func (q *Queries) GetUsers(ctx context.Context, dollar_1 []int64) ([]PreGoAccUserInfo9999, error) {
	rows, err := q.db.Query(ctx, getUsers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoAccUserInfo9999
	for rows.Next() {
		var i PreGoAccUserInfo9999
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUser = `-- name: RemoveUser :exec
DELETE FROM pre_go_acc_user_info_9999 WHERE user_id = $1
`

func (q *Queries) RemoveUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, removeUser, userID)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec


INSERT INTO pre_go_acc_user_info_9999 (
    user_account, user_nickname, user_avatar, user_state, user_mobile,
    user_gender, user_birthday, user_email, user_is_authentication
) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type UpdatePasswordParams struct {
	UserAccount          string
	UserNickname         pgtype.Text
	UserAvatar           pgtype.Text
	UserState            int16
	UserMobile           pgtype.Text
	UserGender           pgtype.Int2
	UserBirthday         pgtype.Date
	UserEmail            pgtype.Text
	UserIsAuthentication int16
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword,
		arg.UserAccount,
		arg.UserNickname,
		arg.UserAvatar,
		arg.UserState,
		arg.UserMobile,
		arg.UserGender,
		arg.UserBirthday,
		arg.UserEmail,
		arg.UserIsAuthentication,
	)
	return err
}

const findUsers = `-- name: findUsers :many
SELECT user_id, user_account, user_nickname, user_avatar, user_state, user_mobile, user_gender, user_birthday, user_email, user_is_authentication, created_at, updated_at
FROM pre_go_acc_user_info_9999
WHERE user_account LIKE '%' || $1 || '%' OR user_email LIKE '%' || $2 || '%'
`

type findUsersParams struct {
	Column1 pgtype.Text
	Column2 pgtype.Text
}

func (q *Queries) findUsers(ctx context.Context, arg findUsersParams) ([]PreGoAccUserInfo9999, error) {
	rows, err := q.db.Query(ctx, findUsers, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoAccUserInfo9999
	for rows.Next() {
		var i PreGoAccUserInfo9999
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: listUsers :many
SELECT user_id, user_account, user_nickname, user_avatar, user_state, user_mobile, user_gender, user_birthday, user_email, user_is_authentication, created_at, updated_at
FROM pre_go_acc_user_info_9999
ORDER BY created_at DESC
`

func (q *Queries) listUsers(ctx context.Context) ([]PreGoAccUserInfo9999, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PreGoAccUserInfo9999
	for rows.Next() {
		var i PreGoAccUserInfo9999
		if err := rows.Scan(
			&i.UserID,
			&i.UserAccount,
			&i.UserNickname,
			&i.UserAvatar,
			&i.UserState,
			&i.UserMobile,
			&i.UserGender,
			&i.UserBirthday,
			&i.UserEmail,
			&i.UserIsAuthentication,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
