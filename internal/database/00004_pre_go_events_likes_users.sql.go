// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: 00004_pre_go_events_likes_users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEventLike = `-- name: CreateEventLike :one
INSERT INTO pre_event_like_user (event_id, user_id)
VALUES ($1, $2)
    RETURNING event_id, user_id, liked_at
`

type CreateEventLikeParams struct {
	EventID pgtype.UUID
	UserID  pgtype.UUID
}

// Create user like event
func (q *Queries) CreateEventLike(ctx context.Context, arg CreateEventLikeParams) (PreEventLikeUser, error) {
	row := q.db.QueryRow(ctx, createEventLike, arg.EventID, arg.UserID)
	var i PreEventLikeUser
	err := row.Scan(&i.EventID, &i.UserID, &i.LikedAt)
	return i, err
}

const deleteEventLike = `-- name: DeleteEventLike :exec
DELETE FROM pre_event_like_user
WHERE event_id = $1 AND user_id = $2
`

type DeleteEventLikeParams struct {
	EventID pgtype.UUID
	UserID  pgtype.UUID
}

// Delete user like event
func (q *Queries) DeleteEventLike(ctx context.Context, arg DeleteEventLikeParams) error {
	_, err := q.db.Exec(ctx, deleteEventLike, arg.EventID, arg.UserID)
	return err
}

const getEventsUserLike = `-- name: GetEventsUserLike :many
SELECT event_id, user_id
FROM pre_event_like_user
WHERE user_id = $1
`

type GetEventsUserLikeRow struct {
	EventID pgtype.UUID
	UserID  pgtype.UUID
}

// Get event user like
func (q *Queries) GetEventsUserLike(ctx context.Context, userID pgtype.UUID) ([]GetEventsUserLikeRow, error) {
	rows, err := q.db.Query(ctx, getEventsUserLike, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsUserLikeRow
	for rows.Next() {
		var i GetEventsUserLikeRow
		if err := rows.Scan(&i.EventID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
