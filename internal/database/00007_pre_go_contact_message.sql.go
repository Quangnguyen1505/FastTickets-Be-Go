// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 00007_pre_go_contact_message.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContactMessage = `-- name: CreateContactMessage :one
INSERT INTO contact_messages (
    name, email, phone, message, status
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, name, email, phone, message, status, created_at
`

type CreateContactMessageParams struct {
	Name    string
	Email   string
	Phone   pgtype.Text
	Message string
	Status  int16
}

func (q *Queries) CreateContactMessage(ctx context.Context, arg CreateContactMessageParams) (ContactMessage, error) {
	row := q.db.QueryRow(ctx, createContactMessage,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Message,
		arg.Status,
	)
	var i ContactMessage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteContactMessage = `-- name: DeleteContactMessage :exec
DELETE FROM contact_messages
WHERE id = $1
`

func (q *Queries) DeleteContactMessage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteContactMessage, id)
	return err
}

const getAllContactMessages = `-- name: GetAllContactMessages :many
SELECT id, name, email, phone, message, status, created_at
FROM contact_messages
WHERE ($1 = -1 OR status = $1)
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetAllContactMessagesParams struct {
	Column1 interface{}
	Limit   int32
	Offset  int32
}

func (q *Queries) GetAllContactMessages(ctx context.Context, arg GetAllContactMessagesParams) ([]ContactMessage, error) {
	rows, err := q.db.Query(ctx, getAllContactMessages, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactMessage
	for rows.Next() {
		var i ContactMessage
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Message,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContactMessageByID = `-- name: GetContactMessageByID :one
SELECT id, name, email, phone, message, status, created_at FROM contact_messages
WHERE id = $1
`

func (q *Queries) GetContactMessageByID(ctx context.Context, id pgtype.UUID) (ContactMessage, error) {
	row := q.db.QueryRow(ctx, getContactMessageByID, id)
	var i ContactMessage
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateContactMessageStatus = `-- name: UpdateContactMessageStatus :exec
UPDATE contact_messages
SET status = $2
WHERE id = $1
`

type UpdateContactMessageStatusParams struct {
	ID     pgtype.UUID
	Status int16
}

func (q *Queries) UpdateContactMessageStatus(ctx context.Context, arg UpdateContactMessageStatusParams) error {
	_, err := q.db.Exec(ctx, updateContactMessageStatus, arg.ID, arg.Status)
	return err
}
